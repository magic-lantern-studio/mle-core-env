<%@ jet package="com.wizzer.mle.codegen" imports="com.wizzer.mle.codegen.*" class="IsmdefsTemplate" %>
<%IMasteringConfiguration config = (IMasteringConfiguration)argument;%>
<%String projectName = (String)config.getPropertyValue(IMasteringConfiguration.PROJECT_NAME);%>
<%String projectDestination = (String)config.getPropertyValue(IMasteringConfiguration.PROJECT_DESTINATION_DIRECTORY);%>
<%String projectSource = (String)config.getPropertyValue(IMasteringConfiguration.PROJECT_SOURCE_DIRECTORY);%>
<%Boolean isVerbose = (Boolean)config.getPropertyValue(IMasteringConfiguration.VERBOSE);%>
<%Boolean isBigEndian = (Boolean)config.getPropertyValue(IMasteringConfiguration.ENDIAN_MODE);%>
<%String tags = (String)config.getPropertyValue(IMasteringConfiguration.TAGS);%>
<%String workprint = (String)config.getPropertyValue(IMasteringConfiguration.DWP);%>
<%String playprint = (String)config.getPropertyValue(IMasteringConfiguration.DPP);%>
<%String actorid = (String)config.getPropertyValue(IMasteringConfiguration.GENGROUP_ACTORID);%>
<%String groupid = (String)config.getPropertyValue(IMasteringConfiguration.GENGROUP_GROUPID);%>
<%Boolean isGroupFixedPoint = (Boolean)config.getPropertyValue(IMasteringConfiguration.GENGROUP_FIXED_POINT);%>
<%String sceneid = (String)config.getPropertyValue(IMasteringConfiguration.GENSCENE_SCENEID);%>
<%Boolean isSceneFixedPoint = (Boolean)config.getPropertyValue(IMasteringConfiguration.GENSCENE_FIXED_POINT);%>
<%String bom = (String)config.getPropertyValue(IMasteringConfiguration.GENMEDIA_INVENTORY);%>
<%String script = (String)config.getPropertyValue(IMasteringConfiguration.GENPPSCRIPT_SCRIPT);%>
<%String toc = (String)config.getPropertyValue(IMasteringConfiguration.GENPPSCRIPT_TOC);%>
##########################################################################
# -*- Makefile -*-
#
# The MIT License (MIT)
#
# Copyright (c) 2000-2020 Wizzer Works
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#  For information concerning this header file, contact Mark S. Millard,
#  of Wizzer Works at msm@wizzerworks.com.
#
#  More information concerning Wizzer Works may be found at
#
#      http://www.wizzerworks.com
#
##########################################################################
#
# ismdefs - ISM definitions and macros
#
# All Makefiles in an ISM should include ismdefs. Following the first
# target in the Makefile $(ISMRULES) should be included. These files
# will in turn include commondefs and commonrules so there is no need
# to explicitly include these files. Each Makefile must define the
# ISM_DEPTH as the relative path to the top of the ISM. In addition
# Makefiles that build software should define CONFIGURATION as one
# of the standard configurations found in
# $MLE_ROOT/include/make/configurations. Thus, a typical Makefile will
# look like:
#
# CONFIGURATION = ConsoleRelease
# ISM_DEPTH = ../..
# include $(ISM_DEPTH)/ismdefs
# .
# .
# .
# default: $(TARGETS)
#
# include $(ISMRULES)
#
# Please refer to the commondefs file for detail information.
#
##########################################################################

#
# If you want to force the build of only one version of the ISM
# you can either define an environment variable PREF_VERSION set
# to the desired version or uncomment PREF_VERSION below and set
# it to the version to be built. By default all versions are built.
#
ifndef PREF_VERSION
#PREF_VERSION = <specific version name here>
endif 

#
# Location of MLE_ROOT environment.  Override by defining MLE_ROOT.
#
ifndef MLE_ROOT
MLE_ROOT = "C:/Program Files/Wizzer Works/Magic Lantern"
endif

#
# ISM name.  It can be whatever you want
#
ISM_NAME = <%=projectName%>

#
# ISM version number. This number is passed as a string defined in
# C/C++ files as ISM_VERSION.
#
ISM_VERSION = 0.1

#
# Time Bomb date. Comment out ISM_TIMEBOMB_DATE to remove time bombing.
# The ISM_TIMEBOMB_DATE variable MUST be in the form mm/dd/yyyy.
#
ISM_TIMEBOMB_DATE = 12/15/2006

#
# Bring in ismcommondefs (which, in turn, will bring in commondefs)
# (must do this after the above definitions!)
#
include $(MLE_ROOT)/include/make/ismcommondefs

#
# The install builder needs to know the top of the tree.  For this
# example, it happens to be at ISM_DEPTH.  However, it may be one
# above this directory, especially if you follow the cross-platform
# development guidelines.
#
IBBASEDIR = $(ISM_DEPTH)

#
# Common ISM directories
#
# The debug and release directories are typically where all
# executables and their DLLs are copied during the build so
# that the executables can be run.
#
ISM_INCDIR = $(ISM_DEPTH)/build/include
ISM_LIBDIR = $(ISM_DEPTH)/build/lib
ISM_DEBUGDIR = $(ISM_DEPTH)/build/Debug
ISM_RELEASEDIR = $(ISM_DEPTH)/build/Release

#
# Define the rules macro. After the first target in the Makefile is
# defined include $(ISMRULES).
#
ISMRULES = $(ISM_DEPTH)/ismrules
