NOTE: Microsoft Visual Studio 6 is no longer supported. Please move to Visual
Studio 2010 for currently supported Windows build envionment.

********************************************************************************

Assumptions

1) Version 5.8.8 of ActivePerl from ActiveState is installed. This build environment has been tested with binary
   build 820.
2) Version 8.4.7.0 of Active TCL is installed. This build environment has been tested with
   binary build 108887.
3) Microsoft Visual Studio C++ v6.0 is installed with Service Pack 6 applied.
4) Version 1.7.0 of Ant from Apache is installed.
5) Version 2.4.4 of Coin 3D is built and installed. To build, use
   Coin3D\Coin-2.4.4\build\msvc6\coin2.dsw
6) Version 1.3.0 of SoWin is built and installed. To build, use
   Coin3D\SoWin-1.3.0\build\msvc6\sowin1.dsw
7) Make sure that M:\projects\MagicLantern\bin, M:\projects\MagicLantern\bin\rehearsal,
   M:\Coin3d\bin, M:\Perl\bin, M:\Tcl\bin and M:\ant\bin are part of the PATH environment variable.

To build the Magic Lantern components using Microsoft Visual C++ v6.0, do the following:


I. Build the Core "util" library for tools.
    1. Core\util\win32\src\MleUtil.dsw - This builds the util.lib (Release) and utild.lib (Debug) libraries and places
       them in the "lib\tools" directory.


II. Build the Core "math" libraries.
    1. Core\math\win32\src\mlmath.dsw - This builds the following libraries:

       mlmath.lib (Floating-point Release)
       mlmathd.lib (Floating-point Debug)
       mlfmath.lib (Fixed-point Release)
       mlfmathd.lib (Fixed-point Debug)

       The results are placed in the "lib/runtime/stdcall" directory.

       Floating-point versions of the libraries are also built for the tools:

       mlmath.lib (Tools Float Debug)
       mlmathd.lib (Tools Float Release)

       The tools versions of these builds are placed in the "lib/tools" and "lib/runtime/cdecl" directories.

       Floating-point versions of these libraries are also built for the Rehearsal Player:

       mlmath.dll/mlmath.lib (Release)
       mlmathd.dll/mlmathd.lib (Debug).

       The Rehearsal Player builds are placed in the "bin/rehearsal" (DLL) and "lib/rehearsal" (lib) directories.


III. Build the Digital Workprint SDK libraries.
    1. DigitalWorkprint\lib\DWPAccess\DWPAccess.dsw - This builds the following libraries:

       DWPBase.lib   - The DWP Base library (Release)
       DWPBased.lib  - The DWP Base library (Debug)
       DWPType.lib   - The DWP Type library (Release)
       DWPTyped.lib  - The DWP Type library (Debug)
       DWPModel.lib  - The DWP Model library (Release)
       DWPModeld.lib - The DWP Model library (Debug)
       DWP.lib       - The entire DWP SDK (contains DWPBase.lib, DWPType.lib, DWPModel.lib Release)
       DWPd.lib      - The entire DWP SDK (contains DWPBased.lib, DWPTyped.lib, DWPModeld.lib Debug)

       These libraries are placed in the "lib/tools" directory. This workspace will also build the DWpChecker.exe utility.
       This program is placed in the "bin" directory.

       Two DLL versions of DWP are built for use with the Rehearsal Player:

       DWP.dll/DWP.lib (Release)
       DWPd.dll/DWPd.lib (Debug)

       The Rehearsal Player (below) builds are placed in the "bin/rehearsal" (DLL) and "lib/rehearsal" (lib) directories.


IV. Build the Digital Playprint SDK libraries.
    1. DigitalPlayprint\lib\DPPAccess\DPPAccess.dsw - This builds the following libraries:

       DPPBase.lib   - The DPP Base library (Release)
       DPPBased.lib  - The DPP Base library (Debug)
       DPPType.lib   - The DWP Type library (Release)
       DPPTyped.lib  - The DPP Type library (Debug)
       DPPModel.lib  - The DPP Model library (Release)
       DPPModeld.lib - The DPP Model library (Debug)
       DPP.lib       - The entire DPP SDK (contains DPPBase.lib, DPPType.lib, DPPModel.lib Release)
       DPPd.lib      - The entire DPP SDK (contains DPPBased.lib, DPPTyped.lib, DPPModeld.lib Debug)

       These libraries are placed in the "lib/tools" directory.


V. Build the Digital Playprint Runtime library for tools.
    1. DigitalPlayprint\runtime\DPPRuntime\DPPRuntime.dsw - This builds the playprint.lib (Release) and playprintd.lib (Debug)
       libraries. These libraries are placed in the "lib/tools", "lib/runtime/stdcall" and "lib/runtime/cdecl" directories.


VI. Build the Mastering library and tools.
    1. DigitalPlayprint\master\DPPMaster\DPPMaster.dsw - This builds the following:

       DPPGen.lib  - The DPP support mastering library (Release)
       DPPGend.lib - The DPP support mastering library (Debug)

       These libraries are placed in the "lib/tools" directory.

       gentables.exe   - Generates the tables (source code) for the title.
       gengroup.exe    - Generates the Group chunks for the DPP.
       genscene.exe    - Generates the Scene chunks for the DPP.
       genmedia.exe    - Generates the MediaRef chunks for the DPP.
       genppscript.exe - Generates a TCL script for laying out the DPP.
       gendpp.exe      - Generates a DPP using the TCL script.
       dumpgroup.exe   - Dump the contents of a Group chunk.
       dumpmedia.exe   - Dump the contents of a MediaRef chunk.
       dumpscene.exe   - Dump the contenst of a Scene chunk.
       genmakefile.exe - Generates a Makefile for the title. Not used yet.

       These tools are placed in the "bin" directory.


VII. Build the MLE Runtime Engine libraries.
    1. Core\mlert\MleRT - This builds the Magic Lantern Runtime libraries for the Win32 platform.
       The following libraries are built:

       mlert.lib        - The runtime engine library. (Release)
       mlertd.lib       - The runtime engine library. (Debug)

       These libraries are placed in the "lib/runtime/stdcall" and "lib/runtime/cdecl" directories.

       The libraries also need to be built for the Rehearsal Player target.
       

       mlert.lib        - The runtime engine export library for rehearsal. (Release)
       mlert.dll        - The runtime engine DLL for rehearsal. (Release)
       mlertd.lib       - The runtime engine export library for rehearsal. (Debug)
       mlertd.dll       - The runtime engine DLL for rehearsal. (Debug)

       These are place in the "bin/rehearsal" (DLL) and "lib/rehearsal" (lib) directories..

VIII. Build the Magic Lantern Authoring Toolkit (ATK)
    1. ATK\win32\ATK\ATK.dsw - This builds the Authoring Toolkit for the Inventor platform. The following libraries are built:

       mleatk.lib  - Messaging and basic player support. (Release)
       mleatkd.lib - Messaging and basic player support. (Debug)
       mlewin.lib  - Magic Lantern hooks for SoWin Inventor GUI. (Release) - OBSOLETE
       mlewind.lib - Magic Lantern hooks for SoWin Inventor GUI. (Debug)   - OBSOLETE

       These libraries are placed in the "lib/rehearsal" directory.

IX. Build the Parts Properties distribution.
    1. Open a shell that is compatible with the Wizzer Works development environment.
    2. cd Parts/props/win32
    3. make install

    This distributes the props header files to "include/mle" and the props workprint files to "include/workprints".

NOTE: There are some dependency issues with building the Roles, Sets and Stages for the Rehearsal Player platform
This affects steps X, XI and XIV below. Essentially, there is a circular dependency chain:

    Mle2dRole[d].dll "depends on" Mle2dSet[d].lib
    Mle2dSet[d].dll "depends on" MleIvStage[d].lib and Mle2dRole[d].lib
    Mle3dSet[d].dll "depends on" MleIvStage[d].lib
    MleIvStage[d].dll "depends on" Mle2dRole[d].lib and Mle2dSet[d].lib and Mle3dSet[d].lib

To break this dependency chain, we need to generate the .lib files independently of when the .dll files are built.
    1. Build the MleIvStage object files first. This will generate the .obj files but fail to create the
       MleIvStage[d].dll and MleIvStage[d].lib files. See step XV below for the Microsoft workspace location.
    2. In a shell window, cd "$MLE_HOME\Parts\stages\rehearsal\src\Debug.
    3. Run "lib.exe /out:MleIvStaged.lib /def *.obj". This will generate the MleIvStaged.lib file.
       Copy the library to $MLE_HOME\lib\rehearsal.
    4. cd "$MLE_HOME\Parts\stages\rehearsal\src\Release.
    5. Run "lib.exe /out:MleIvStage.lib /def *.obj". This will generate the MleIvStage.lib file.
       Copy the library to $MLE_HOME\lib\rehearsal.
    6. Build the Mle2dRole object files. This will generate the .obj files but fail to create the
       Mle2dRole[d].dll and Mle2dRole[d].lib files. See step X below for the Microsoft workspace location.
    7. In a shell window, cd "$MLE_HOME\Parts\roles\win32\Mle2dRole\Debug.
    8. Run "lib.exe /out:Mle2dRoled.lib /def *.obj". This will generate the Mle2dRoled.lib file.
       Copy the library to $MLE_HOME\lib\rehearsal.
    9. cd "$MLE_HOME\Parts\roles\win32\Mle2dRole\Release.
    10. Run "lib.exe /out:Mle2dRole.lib /def *.obj". This will generate the Mle2dRole.lib file.
        Copy the library to $MLE_HOME\lib\rehearsal.

X. Build the Parts Roles.
    1. Parts\roles\MleRoles\MleRoles.dsw - This builds the Magic Lantern Roles

       The brroles.lib (Release) and brrolesd.lib (Debug) libraries are built for the BRender platform. The results are placed
       in the "lib/brender" directory.

       The ivroles.lib (Release) and ivrolesd.lib (Debug) libraries are built for the Rehearsal platform. The results are placed
       in the "lib/rehearsal" directory.

       For the Rehearsal platform, the following libraries are also built:

       Mle2dRole.dll/Mle2dRole.lib - Role for 2-dimensional rendering (Release)
       Mle2dRoled.dll/Mle2dRoled.lib - Role for 2-dimensional rendering (Debug)
       Mle3dRole.dll/Mle3dRole.lib - Role for 3-dimensional rendering (Release)
       Mle3dRoled.dll/Mle3dRoled.lib - Role for 3-dimensional rendering (Debug)

XI. Build the Parts Sets.
    1. Parts\sets\MleSets\MleSets.dsw - This builds the Magic Lantern Sets.

       For the BRender platform, the brsets.lib (Release) and brsetsd.lib (Debug) libraries are built. The results are placed in 
       the "lib/brender" directory.

       For the Rehearsal platform, the following libraries are built:

       Mle2dSet.dll/Mle2dSet.lib - Set for 2-dimensional rendering (Release)
       Mle2dSetd.dll/Mle2dSetd.lib - Set for 2-dimensional rendering (Debug)
       Mle3dSet.dll/Mle3dSet.lib - Set for 3-dimensional rendering (Release)
       Mle3dSetd.dll/Mle3dSetd.lib - Set for 3-dimensional rendering (Debug)

       The results are placed in the "bin/rehearsal" (DLL) and "lib/rehearsal" (lib) directories.

XII. Build the Parts Packages (Behaviors)
    1. Parts\packages\MlePackages\MlePackages.dsw - This build the following libraries:

       pkgs.lib - Floating-point Release
       pkgsd.lib - Floating-point Debug
       fpkgs.lib - Fixed-point Release
       fpkgsd.lib - Fixed-point Debug

       The results are placed in the "lib/runtime/cdecl" directory.

XIII. Build the Parts Actors.
    1. Parts\actors\MleActors\MleActors.dsw - This builds the actors.lib (Release) and actorsd.lib (Debug) libraries.
       The results are placed in the "lib/runtime/stdcall" and "lib/runtime/cdecl" directories.

       The following DLL's are also built for the Rehearsal Player:

       MleEscapeActor.dll/MleEscapeActor.lib - Escape Key Actor (Release)
       MleEscapeActord.dll/MleEscapeActord.lib - Escape Key Actor (Debug)
       Mle3dCameraActor.dll/Mle3dCameraActor.lib - 3D Camera Actor (Release)
       Mle3dCameraActord.dll/Mle3dCameraActord.lib - 3D Camera Actor (Debug)

       The Rehearsal Player libraries are placed in the "bin/rehearsal" (DLL) and "lib/rehearsal" (lib) directories.

XIV. Build the Parts MediaRefs.
    1. Parts\mediaref\MleMediaRefs\MleMediaRefs.dsw - This builds the Magic Lantern Media References.

       The brmrefs.lib (Release) and brmrefsd.lib (Debug) libraries are built for the BRender platform. The results
       are placed in the "lib/runtime" directory.

       The following DLL's are also built for the Rehearsal Player:

       Mle3dColorMapMediaRef.dll/Mle3dColorMapMediaRef.lib - 3D Color Map MediaRef (Release)
       Mle3dColorMapMediaRefd.dll/Mle3dColorMapMediaRefd.lib - 3D Color Map MediaRef (Debug)
       Mle3dModelMediaRef.dll/Mle3dModelMediaRef.lib - 3D Model MediaRef (Release)
       Mle3dModelMediaRefd.dll/Mle3dModelMediaRefd.lib - 3D Model MediaRef (Debug)
       Mle3dTextureMapMediaRef.dll/Mle3dTextureMapMediaRef.lib - 3D Texture Map MediaRef (Release)
       Mle3dTextureMapMediaRefd.dll/Mle3dTextureMapMediaRefd.lib - 3D Texture Map MediaRef (Debug)

       The Rehearsal Player libraries are placed in the "bin/rehearsal" (DLL) and "lib/rehearsal" (lib) directories.

XV. Build the Parts Stages.
    1. Parts\stages\MleStages\MleStages.dsw

       For the BRender platform, this builds the following libraries:

       pcstage.lib  - A common stage library for the Win32 platform. (Release)
       pcstaged.lib - A common stage library for the Win32 platform. (Debug)
       brstage.lib  - The stage library for the BRender platform. (Release)
       brstaged.lib - The stage library for the BRender platform. (Debug)

       These libraries are placed in the "lib/brender" directory.

       For the Inventor platform for the Rehearsal Player, the following libraries are built:

       MleIvStage.dll/MleIvStage.lib  - The stage library for the Inventor platform. (Release)
       MleIvStaged.dll/MleIvStaged.lib - The stage library for the Inventor platform. (Debug)

       These libraries are placed in the "bin/rehearsal" and "lib/rehearsal" directory.

XVI. Build the MLE Rehearsal Player.
    1. Players\MlePlayers\MlePlayers.dsw

       player.exe - The Rehearsal Player

       This executable is placed in the "bin/rehearsal" directory.

       Note: Make sure that M:\projects\MagicLantern\bin\rehearsal is in your path.

XVII. Build the Java DWP support DLL.
    1. M:\projects\MagicLantern\Studio\plugins\com.wizzer.mle.studio.dwp\src\win32\JavaDwp\JavaDwp.dsw - This builds the DwpReader.dll and places it in M:\projects\MagicLantern\Studio\com.wizzer.mle.studio.dwp\os\win32\x86 directory.


XVIII. Build the BRender Moving Teapot Demo
   1. See the "Titles\mtea\src\Readme.txt" for information on how to use the mastering tools for creating the Digital Playprint.
   2. Titles\mtea\src\win32\mtea.dsw - Builds the Moving Teapot demo.
   3. To run from within Visual Studio:
        i. copy Titles\mtea\src\win32\mtea.dpp up one directory to Titles\mtea\src\mtea.dpp,
       ii. add BRENDER_PATH\..\bin to the Visual Studio C++ 6.0 Directory,
      iii. select the 'Execute Program' button from the Visual Studio Toolbar.
       iv. you should see a rotating teapot with a mandrill texture map.
   4. To run from a command shell:
        i. copy Titles\mtea\src\win32\mtea.dpp up one directory to Titles\mtea\src\mtea.dpp,
       ii. cd Titles\mtea\src
      iii. run "win32\Release\mtea.exe mtea.dpp"
       iv. you should see a rotating teapot with a mandrill texture map.

XIX. Build the Rehearsal Moving Teapot Demo
   TBD

XX. Build the BRender SuperSled Demo
   TBD

XXI. Build the Rehearsal SuperSled Demo
   TBD
